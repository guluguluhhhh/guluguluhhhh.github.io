<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Asynchronous - Tag - 华子的博客</title>
        <link>https://guluguluhhhh.github.io/tags/asynchronous/</link>
        <description>Asynchronous - Tag - 华子的博客</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Fri, 27 Jun 2025 16:38:22 &#43;0800</lastBuildDate><atom:link href="https://guluguluhhhh.github.io/tags/asynchronous/" rel="self" type="application/rss+xml" /><item>
    <title>coroutine</title>
    <link>https://guluguluhhhh.github.io/coroutine/</link>
    <pubDate>Fri, 27 Jun 2025 16:38:22 &#43;0800</pubDate>
    <author>huazi</author>
    <guid>https://guluguluhhhh.github.io/coroutine/</guid>
    <description><![CDATA[<h1 id="进程线程协程">进程、线程、协程</h1>
<p>线程是CPU调度的最小单位, 进程是资源分配的最小单位。对于线程和进程，我们可以这么理解：</p>
<ul>
<li>当进程只有一个线程时，可以认为进程就等于线程。</li>
<li>当进程拥有多个线程时，这些线程会共享相同的虚拟内存和全局变量等资源。这些资源在上下文切换时是不需要修改的。</li>
<li>线程也有自己的私有数据，比如栈和寄存器等，这些在上下文切换时也是需要保存的。</li>
</ul>
<p>协程作为用户态线程，也是轻量级的线程，用来解决高并发场景下线程切换的资源开销。协程跟线程是有区别的</p>]]></description>
</item>
</channel>
</rss>
